#!/usr/bin/env python
# Copyright 2005,2006 Michael Rice
# errr@errr-online.com
# vim: noexpandtab:ts=4:sts=4

""" fluxStyle

fluxStyle is a graphical style-manager for the fluxbox
window manager. Orignal version written by Michael Rice.
Many special thanks to Zan a.k.a. Lauri Peltonen for GUI 
Improvements & Bug Stomping. 

Released under GPL v2.

TODO 
- somehow support older styles and not put folders in the list 
  like folders that dont have anything to do with a style.
- fix any bugs that may still be there and unseen..
- add tray icon support (this is started will be done soon)
- convert install script to python. This will allow checking for
  libs so it doesnt have to be done in the main app.
  
"""
import sys
sys.path.append("./fluxstyle")
import os
from fluxstyle import findStyles,parseConfig
from os.path import isfile,expanduser,isdir
import gtk
from fluxstyle import errorMessage
import gtk.glade
if gtk.pygtk_version < (2,3,90):
    #we do have gtk so lets tell them via gui that they need to update pygtk
    #maybe we should add a 'would you like to open a browser to pygtk.org ??
    message = "PyGtk 2.3.90 or later required for this program it is reccomended "
	message += "that you get pygtk 2.6 or newer for best results."
    errorMessage.infoMessage(message)
    raise SystemExit
  
#GLADE_FILE="/usr/share/fluxstyle-1.0/glade/main.glade"
GLADE_FILE="./images/main.glade"

class StyleChange:
    """Class wrapper for changing styles in fluxbox"""
    location = ""
    def main(self):
        gtk.main()
    
    def __init__(self):
        """The main fluxStyle window will show"""
        global location
        windowname = "fluxstyle_main"
        self.wTree = gtk.glade.XML (GLADE_FILE,windowname)
        self.styletree = self.wTree.get_widget("style_tree")
        self.view_menu = self.wTree.get_widget("view1_menu")
        self._fill_view_menu(self.view_menu)
        
        handler = {"on_apply_style_clicked":self._apply_style_clicked,
                   "on_quit_clicked":(gtk.main_quit),
                   "on_add_style_clicked":self._add_style_clicked,
                   "on_remove_style_clicked":self._remove_style_clicked,
                   "on_quit1_activate":(gtk.main_quit),
                   "on_about1_activate":self._about1_activate,
                   "on_window1_destroy":(gtk.main_quit),
				   "on_edit_style_clicked":self._edit_style,
                   "on_default1_activate":self._fill_combolist}
        
        self.wTree.signal_autoconnect (handler)

        #Preparing the treeview here
        self.liststore = gtk.ListStore(gtk.gdk.Pixbuf, str)
        self.styletree.set_model(self.liststore)

        renderer = gtk.CellRendererText()
        imagerenderer = gtk.CellRendererPixbuf()
        imagerenderer.set_property('ypad', 10)
        imagerenderer.set_property('xpad', 5)
        column1 = gtk.TreeViewColumn("Preview", imagerenderer, pixbuf=0)
        column1.set_resizable(True)
        column2 = gtk.TreeViewColumn("Name", renderer, text=1)
        column2.set_resizable(True)
        self.styletree.append_column(column1)
        self.styletree.append_column(column2)

        #Fill it (Clear + fill)
        self._fill_combolist(self.styletree,loc="default")
        return
    
    # Call backs begin here 
    # fill combo list    
    def _fill_combolist(self,widget,loc="default"):
        """Fill the combo list with styles test to see if there is a ~/.fluxbox/styles
        if there isnt then make it and move on instead of die."""
        global location
        location = expanduser(loc)
        if location == "default":
            location = expanduser("~/.fluxbox/styles")
            try:
                dir = os.listdir(location)
                dir.sort()
                self.liststore.clear()
                for styles in dir:
				    self.liststore.append((self._get_preview(styles), styles,))
            except(OSError):
                dir = expanduser("~/.fluxbox/styles")
                os.makedirs(dir,mode=0700)
                message = "You do not have a default style folder yet I have made it for you. "
				message += "The list will remain empty until you install a style which "
				message += "you can do by clicking the add button."
		        errorMessage.infoMessage(message)
        else:
		    try:
			    dir = os.listdir(location)
				dir.sort()
				self.liststore.clear()
				for styles in dir:
				    self.liststore.append((self._get_preview(styles), styles,))
			except(OSError):
			    m = "You have an invalid location in your ~/.fluxStyle.rc file. It is possible "
				m += "that you have a syntax error. Please exit fluxStlye and fix the error in "
				m += "this file and try again."
				errorMessage.infoMessage(m)
    # get the preview image for view
    def _get_preview(self, stylename):
	    """Get the preview image from: location + /styleName/preview.jpg"""
        global location
        location = expanduser(location)
        image = gtk.Image()
        if os.path.isdir(location + "/" + stylename):
            if isfile(location+"/"+stylename+"/preview.jpg"):
                image.set_from_file(location+"/" +stylename+"/preview.jpg")
            else:
                #image.set_from_file( "/usr/share/fluxstyle-1.0/images/none.jpg")
                image.set_from_file( "./images/none.jpg")
        return image.get_pixbuf()
    def _fill_view_menu(self, widget):
        v_menuNam = None
        if parseConfig.check4_config() == 2:
            message = "This looks like the first time you have started fluxStlye "
			message += "a default config has been created for you. You should edit "
			message += "this config to control the location of styles shown in the "
			message += "preview window. The config file is located in ~/.fluxStyle.rc"
            errorMessage.infoMessage(message)
        
        elif parseConfig.check4_config() == 3:
            message = "You do not have the config file \"~/.fluxStyle.rc\" and you do "
			message += "not have write access to the \"~/\" aka $HOME directory. If you "
			message += "find this is not accurate information please report a bug to errr@"
			message += "errr-online.com"
            errorMessage.infoMessage(message)
        elif parseConfig.check4_config() == True:
            ops = parseConfig.parse_file(expanduser("~/.fluxStyle.rc"))
			l = []
            if ops != False:
                count = 1
                view = self.view_menu
                for k,v in ops.iteritems():
                    if k == "STYLES_DIRS":
                        for x in v:
						    l.append(x.strip().split(','))
						for i in l:
						    if len(i) <= 1:
							    name = "_"+str(count)+" %s"%(" Extra Styles")
								menuitem = gtk.MenuItem(name + str(count))
								menuitem.connect("activate", self._fill_combolist,i[0])
								view.add(menuitem)
								count += 1
							else:
							    name = "_%s"%(i[0])
								menuitem = gtk.MenuItem(name)
								menuitem.connect("activate",self._fill_combolist,i[1])
								view.add(menuitem)
                    view.show_all()            
    # Set style 
    def _apply_style_clicked(self,widget):
        """Used to apply new styles"""
        global location
        style = self._get_selected_style()
        if style:
            findStyles.set_style(style,location)

    # Add style
    def _add_style_clicked(self,widget):
        """Install a new style, multiple styles can be installed at once."""
        
        dialog = gtk.FileChooserDialog("Choose file to install",
                                        None,gtk.FILE_CHOOSER_ACTION_OPEN,
                                        (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                                        gtk.STOCK_OPEN, gtk.RESPONSE_OK))
        dialog.set_default_response(gtk.RESPONSE_OK)
        filter = gtk.FileFilter()
        filter.set_name("Fluxbox Styles")
        filter.add_mime_type("tar/gz")
        filter.add_mime_type("tar/bz2")
        filter.add_pattern("*.tar.gz")
        filter.add_pattern("*.tar.bz2")
        filter.add_pattern("*.tgz")
        dialog.add_filter(filter)
        dialog.set_select_multiple(True)

        response = dialog.run()
        if response == gtk.RESPONSE_OK:
            findStyles.install_style(dialog.get_filenames())
            self._fill_combolist(self)
            dialog.destroy()
        if response == gtk.RESPONSE_CANCEL:
            dialog.destroy()
    
    # remove style
    def _remove_style_clicked(self,widget):
        """Remove selected style, currently only 1 style at a time is supported"""
        global location
        style = self._get_selected_style()
        if style == False:
            m = "You must select a style to remove first"
            errorMessage.infoMessage(m)            
        else:
            message = gtk.MessageDialog(None, gtk.DIALOG_MODAL, gtk.MESSAGE_INFO, \
                gtk.BUTTONS_NONE, "Are you sure you want to delete %s?"%(style))
            message.add_button(gtk.STOCK_OK, gtk.RESPONSE_OK)
            message.add_button(gtk.STOCK_CANCEL, gtk.RESPONSE_CLOSE)
            response = message.run()
            message.hide()
            if response == gtk.RESPONSE_OK:
                if findStyles.remove_style(style,location) != False:
                    message.destroy()
                    self._fill_combolist(self,location)
                else:
                    say = "You do not have access to remove this style please contact "
					say += "your system admin for help removing this style."
                    message = gtk.MessageDialog(None, gtk.DIALOG_MODAL, gtk.MESSAGE_INFO, \
						gtk.BUTTONS_NONE, say)
                    message.add_button(gtk.STOCK_CLOSE, gtk.RESPONSE_CLOSE)
                    response = message.run()
                    message.hide()
                if response == gtk.RESPONSE_CLOSE:
                    message.destroy()
            if response == gtk.RESPONSE_CLOSE:
                message.destroy()
    def _get_selected_style(self):
        """Getting the selected style"""
        selection = self.styletree.get_selection()
        (model, iter) = selection.get_selected()
        if model and iter:
            return model.get_value(iter, 1)
        else:
            return False
    
	def _edit_style(self,widget):
	    """Edit currently selected style"""
		windowname="style_editor"
		self.window = gtk.glade.XML (GLADE_FILE,windowname)
		handler = {"on_quit_clicked":self._edit_quit}
		self.window.signal_autoconnect(handler)
		table2 = self.window.get_widget("table2")
		notebook = self.window.get_widget("style_notebook")
		#parse the fluxbox-style file to find out 
		#what entrys need to be added/removed from the main
		#notebook heading
		
		#tmp list of titles
		titles = ["Window Settings","Menu Settings","Slit Settings","Toolbar Settings"]
		
		#set the names of the tabs
		#use while loop to go though and set each title
		#while val != None
		count = 0
		val = notebook.get_tab_label(notebook.get_nth_page(count))
		while val != None:
		    val.set_text(titles[count])
			count +=1
			try:
			    val = notebook.get_tab_label(notebook.get_nth_page(count))
			except TypeError:
			    break
		table2.resize(3,2)
		f = gtk.Label("test")
		f.show()
		table2.attach(f,0,2,2,3)
		table2.show()
		#child = gtk.Table(2,2,True)
		#title = gtk.Label("title")
		#a = gtk.Label("poo")
		#a.show()
		#b = gtk.Label("cunt")
		#c = gtk.Label("fucking crap")
		#b.show()
		#c.show()
		#notebook.insert_page_menu(child,title,position=-1)
		#child.attach(a,0, 1, 0, 1)
		#child.attach(b,1, 2, 0, 1)
		#child.attach(c,0, 2, 1, 2)

		#child.show()
			
		
	def _edit_quit(self,widget):
	    self.window.get_widget("style_editor").destroy()
		return True
	
    def _about1_activate(self,widget):
        """Activate the help button with the about dialog, use generic if pygtk < 2.5.9"""
        if gtk.pygtk_version < (2,5,90):
            message = "fluxStyle version 1.0 Updae your pygtk version for more features. Version "
			message += "2.6.0 or newer is reccomended"
            errorMessage.infoMessage(message)
        else:
            windowname2="aboutdialog1"
            self.wTree2=gtk.glade.XML (GLADE_FILE,windowname2)
if __name__ == "__main__":
    style = StyleChange()
    style.main()
